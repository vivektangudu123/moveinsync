{"ast":null,"code":"export const loginUser = async (mobileNumber, Role) => {\n  try {\n    const response = await fetch('http://localhost:5001/auth/send_otp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mobileNumber: mobileNumber,\n        // ensure this is a string\n        role: Role // ensure this is an integer\n      })\n    });\n    if (response.ok) {\n      const data = await response.text();\n      return data === \"pending\" ? \"pending\" : data;\n    } else {\n      console.log(`Request failed with status: ${response.status}`);\n      return \"error\";\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    throw error;\n  }\n};\nexport const Login_OTP = async (mobileNumber, otp) => {\n  try {\n    const response = await fetch(\"http://localhost:5001/auth/verify_otp\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        mobileNumber: mobileNumber,\n        // ensure this is a string\n        otp: otp // ensure this is an integer\n      })\n    });\n    if (response.ok) {\n      const data = await response.text();\n      if (data === \"-1\") {\n        return false;\n      } else {\n        localStorage.setItem(\"JWT\", data);\n        return true;\n      }\n    } else {\n      console.log(\"Request failed with status:\", response.status);\n      return \"error\";\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    throw error;\n  }\n};\n_c = Login_OTP;\nexport const getUserBookings = async () => {\n  const token = localStorage.getItem('JWT');\n  const response = await fetch(\"http://localhost:5001/users/bookings\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      jwt: token\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Error: ${response.status} - ${response.statusText}`);\n  }\n  const text = await response.text(); // Get the raw response text\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(text, \"text/xml\");\n  const items = xmlDoc.getElementsByTagName(\"item\");\n  const bookings = Array.from(items).map(item => ({\n    bookingId: item.getElementsByTagName(\"bookingId\")[0].textContent,\n    seatNumber: item.getElementsByTagName(\"seatNumber\")[0].textContent,\n    bookingTime: item.getElementsByTagName(\"bookingTime\")[0].textContent,\n    travelDate: item.getElementsByTagName(\"travelDate\")[0].textContent,\n    status: item.getElementsByTagName(\"status\")[0].textContent,\n    source: {\n      first: item.getElementsByTagName(\"source\")[0].getElementsByTagName(\"first\")[0].textContent,\n      second: item.getElementsByTagName(\"source\")[0].getElementsByTagName(\"second\")[0].textContent\n    },\n    destination: {\n      first: item.getElementsByTagName(\"destination\")[0].getElementsByTagName(\"first\")[0].textContent,\n      second: item.getElementsByTagName(\"destination\")[0].getElementsByTagName(\"second\")[0].textContent\n    },\n    bus: {\n      busId: item.getElementsByTagName(\"busId\")[0].textContent // Assuming you also want the bus ID\n    }\n  }));\n  return bookings; // Return the bookings array\n};\nexport const cancelBooking = async bookingId => {\n  const token = localStorage.getItem('JWT');\n  const response = await fetch(\"http://localhost:5001/user/cancel-booking\", {\n    body: JSON.stringify({\n      BookingID: bookingId,\n      jwt: token\n    })\n  });\n  return response;\n};\nvar _c;\n$RefreshReg$(_c, \"Login_OTP\");","map":{"version":3,"names":["loginUser","mobileNumber","Role","response","fetch","method","headers","body","JSON","stringify","role","ok","data","text","console","log","status","error","Login_OTP","otp","localStorage","setItem","_c","getUserBookings","token","getItem","jwt","Error","statusText","parser","DOMParser","xmlDoc","parseFromString","items","getElementsByTagName","bookings","Array","from","map","item","bookingId","textContent","seatNumber","bookingTime","travelDate","source","first","second","destination","bus","busId","cancelBooking","BookingID","$RefreshReg$"],"sources":["/Users/vivek/Desktop/movein/shuttle_ride/src/apicalls/user.js"],"sourcesContent":["export const loginUser = async (mobileNumber, Role) => {\n    try {\n        const response = await fetch('http://localhost:5001/auth/send_otp', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                mobileNumber: mobileNumber, // ensure this is a string\n                role: Role                   // ensure this is an integer\n            })\n        });\n\n        if (response.ok) {\n            const data = await response.text();\n            return data === \"pending\" ? \"pending\" : data;\n        } else {\n            console.log(`Request failed with status: ${response.status}`);\n            return \"error\";\n        }\n    } catch (error) {\n        console.error(\"Error:\", error);\n        throw error;\n    }\n};\n\nexport const Login_OTP = async (mobileNumber, otp) => {\n    try {\n        const response = await fetch(\"http://localhost:5001/auth/verify_otp\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*'\n            },\n            body: JSON.stringify({\n                mobileNumber: mobileNumber, // ensure this is a string\n                otp: otp                   // ensure this is an integer\n            })\n        });\n        if (response.ok) {\n            const data = await response.text();\n            if (data === \"-1\") {\n                return false;\n            } else {\n                localStorage.setItem(\"JWT\", data);\n                return true;\n            }\n        }else {\n            console.log(\"Request failed with status:\", response.status);\n            return \"error\";\n        }\n    } catch (error) {\n        console.error(\"Error:\", error);\n        throw error;\n    }\n\n}\nexport const getUserBookings = async () => {\n    const token = localStorage.getItem('JWT');\n    const response = await fetch(\"http://localhost:5001/users/bookings\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            jwt: token\n        })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n    }\n\n    const text = await response.text(); // Get the raw response text\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(text, \"text/xml\");\n    const items = xmlDoc.getElementsByTagName(\"item\");\n    const bookings = Array.from(items).map(item => ({\n        bookingId: item.getElementsByTagName(\"bookingId\")[0].textContent,\n        seatNumber: item.getElementsByTagName(\"seatNumber\")[0].textContent,\n        bookingTime: item.getElementsByTagName(\"bookingTime\")[0].textContent,\n        travelDate: item.getElementsByTagName(\"travelDate\")[0].textContent,\n        status: item.getElementsByTagName(\"status\")[0].textContent,\n        source: {\n            first: item.getElementsByTagName(\"source\")[0].getElementsByTagName(\"first\")[0].textContent,\n            second: item.getElementsByTagName(\"source\")[0].getElementsByTagName(\"second\")[0].textContent,\n        },\n        destination: {\n            first: item.getElementsByTagName(\"destination\")[0].getElementsByTagName(\"first\")[0].textContent,\n            second: item.getElementsByTagName(\"destination\")[0].getElementsByTagName(\"second\")[0].textContent,\n        },\n        bus: {\n            busId: item.getElementsByTagName(\"busId\")[0].textContent, // Assuming you also want the bus ID\n        }\n    }));\n    return bookings; // Return the bookings array\n};\n\nexport const cancelBooking = async (bookingId) => {\n    const token = localStorage.getItem('JWT');\n    const response = await fetch(\"http://localhost:5001/user/cancel-booking\", {\n        body: JSON.stringify({\n            BookingID:bookingId,\n            jwt:token\n           })\n    });\n    return response;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/vivek/Desktop/movein/shuttle_ride/src/pages/home.jsx\",\n  _s = $RefreshSig$();\n// import \"./HomePage.css\";\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Ensure you have this import\n// import { search_busses } from '../apicalls/user'; // Adjust the import as necessary\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//   const handleManageBookings = () => {\n//     navigate(\"/manage-bookings\");\n//   };\n//   const viewSeatPlan = (busId) => {\n//     navigate(`/seat-plan/${busId}`); // Assuming you have a route for seat plan details\n//   };\n//   const handleLogout = () => {\n//     localStorage.removeItem('JWT');  // Clear token on logout\n//     navigate(\"/login\");\n//   };\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n\n//         // Only proceed if token exists\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token); // Call verify_jwt only once\n\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         console.log(\"Invalid token, redirecting to login\");\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n\n//         if (\n//             sourceLatitude === \"\" ||\n//             sourceLongitude === \"\" ||\n//             destinationLatitude === \"\" ||\n//             destinationLongitude === \"\"\n//         ) {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n\n//         // Additional validation: Check latitude and longitude ranges\n//         if (\n//             sourceLatitude < -1 || sourceLatitude > 20 ||\n//             destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 ||\n//             destinationLongitude < -1 || destinationLongitude > 20\n//         ) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         // Fetch buses here\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             console.log(busData); // Check the structure of the bus data\n//             setBuses(busData); // Set the fetched bus data to state\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n\n//       <div className=\"homepage-container\">\n//         <div className=\"top-buttons\">\n//           <button onClick={handleManageBookings} className=\"top-btn\">\n//             Manage Bookings\n//           </button>\n//           <button onClick={handleLogout} className=\"top-btn\">\n//             Logout\n//           </button>\n//         </div>\n\n//         <div className=\"search-container\">\n//           <h1>Bus Search</h1>\n//           <form onSubmit={handleSearch} className=\"horizontal-form\">\n//             <div className=\"coordinate-input\">\n//               <label>Source Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLatitude}\n//                 onChange={(e) => setSourceLatitude(e.target.value)}\n//                 placeholder=\"Source Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Source Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLongitude}\n//                 onChange={(e) => setSourceLongitude(e.target.value)}\n//                 placeholder=\"Source Longitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLatitude}\n//                 onChange={(e) => setDestinationLatitude(e.target.value)}\n//                 placeholder=\"Destination Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLongitude}\n//                 onChange={(e) => setDestinationLongitude(e.target.value)}\n//                 placeholder=\"Destination Longitude\"\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"search-btn\">\n//               Search Buses\n//             </button>\n//           </form>\n\n//             </div>\n\n//             <div className=\"bus-list\">\n//     {buses.map((bus) => (\n//         <div\n//             key={bus.busId}\n//             className={`bus-item ${bus.live ? 'live' : 'not-live'}`}\n//             style={{ backgroundColor: bus.color }}\n//                                                       >\n//             <h3>{bus.busName} (ID: {bus.busId})</h3>\n//             <p>Remaining Seats: {bus.totalSeats}</p>\n//             <p>Current Occupancy: {bus.currentOccupancy}</p>\n//             <p className=\"live-status\" style={{ color: bus.live ? 'White' : 'blue' }}>\n//                 {bus.live ? 'Live' : 'Not Live'}\n//             </p>\n//             <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.busId)}>View Seat Plan</button>\n//             </div>\n//           ))}\n//       </div>\n//         </div>\n//     );\n// };\n\n// export default HomePage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { search_busses } from '../apicalls/user';\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// import './HomePage.css'; // Ensure you have relevant CSS for the modal and layout\n\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//     const [selectedSeatPlan, setSelectedSeatPlan] = useState(null); // For seat plan\n//     const [isModalOpen, setIsModalOpen] = useState(false); // Modal visibility\n\n//     const handleManageBookings = () => {\n//         navigate(\"/manage-bookings\");\n//     };\n\n//     const viewSeatPlan = (seatPlan) => {\n//         setSelectedSeatPlan(seatPlan); // Set seat plan to state\n//         setIsModalOpen(true); // Open modal\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('JWT');  // Clear token on logout\n//         navigate(\"/login\");\n//     };\n\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token);\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n//         if (sourceLatitude === \"\" || sourceLongitude === \"\" || destinationLatitude === \"\" || destinationLongitude === \"\") {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n//         if (sourceLatitude < -1 || sourceLatitude > 20 || destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 || destinationLongitude < -1 || destinationLongitude > 20) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             setBuses(busData);\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n//         <div className=\"homepage-container\">\n//             <div className=\"top-buttons\">\n//                 <button onClick={handleManageBookings} className=\"top-btn\">Manage Bookings</button>\n//                 <button onClick={handleLogout} className=\"top-btn\">Logout</button>\n//             </div>\n\n//             <div className=\"search-container\">\n//                 <h1>Bus Search</h1>\n//                 <form onSubmit={handleSearch} className=\"horizontal-form\">\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLatitude}\n//                             onChange={(e) => setSourceLatitude(e.target.value)}\n//                             placeholder=\"Source Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLongitude}\n//                             onChange={(e) => setSourceLongitude(e.target.value)}\n//                             placeholder=\"Source Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLatitude}\n//                             onChange={(e) => setDestinationLatitude(e.target.value)}\n//                             placeholder=\"Destination Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLongitude}\n//                             onChange={(e) => setDestinationLongitude(e.target.value)}\n//                             placeholder=\"Destination Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"search-btn\">Search Buses</button>\n//                 </form>\n//             </div>\n\n//             <div className=\"bus-list\">\n//                 {buses.map((bus) => (\n//                     <div key={bus.busId} className={`bus-item ${bus.live ? 'live' : 'not-live'}`} style={{ backgroundColor: bus.color }}>\n//                         <h3>{bus.busName} (ID: {bus.busId})</h3>\n//                         <p>Total Seats: {bus.totalSeats}</p>\n//                         <p>Current Occupancy: {bus.currentOccupancy}</p>\n//                         <p className=\"live-status\" style={{ color: bus.live ? 'white' : 'blue' }}>{bus.live ? 'Live' : 'Not Live'}</p>\n//                         <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.seatPlan)}>View Seat Plan</button>\n//                     </div>\n//                 ))}\n//             </div>\n\n//             {isModalOpen && selectedSeatPlan && (\n//     <div className=\"seat-plan-modal\">\n//         <div className=\"modal-content\">\n//             <h2>Seat Plan</h2>\n//             <div className=\"seat-grid\">\n//                 {Object.keys(selectedSeatPlan)\n//                     .sort((a, b) => {\n//                         // Extract number and letter from seat (e.g., \"1A\")\n//                         const [aNumber, aLetter] = [parseInt(a[0]), a[1]];\n//                         const [bNumber, bLetter] = [parseInt(b[0]), b[1]];\n\n//                         // Sort by number first, then by letter\n//                         if (aNumber === bNumber) {\n//                             return aLetter.localeCompare(bLetter); // Sort alphabetically if numbers are the same\n//                         }\n//                         return aNumber - bNumber; // Sort numerically\n//                     })\n//                     .map((seatNumber) => (\n//                         <div\n//                             key={seatNumber}\n//                             className=\"seat\"\n//                             style={{\n//                                 backgroundColor: selectedSeatPlan[seatNumber] ? 'lightgreen' : 'lightcoral',\n//                             }}\n//                         >\n//                             {seatNumber}: {selectedSeatPlan[seatNumber] ? 'Available' : 'Booked'}\n//                         </div>\n//                     ))}\n//             </div>\n//             <button className=\"close-btn\" onClick={() => setIsModalOpen(false)}>Close</button>\n//         </div>\n//     </div>\n// )}\n\n//         </div>\n//     );\n// };\n\n// export default HomePage;\nimport React, { useState, useEffect } from 'react';\nimport { book_seat_api } from '../apicalls/user'; // Add your API call import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [buses, setBuses] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedSeatPlan, setSelectedSeatPlan] = useState(null);\n  const [selectedSeat, setSelectedSeat] = useState(null); // Keep track of the selected seat\n\n  const viewSeatPlan = seatPlan => {\n    setSelectedSeatPlan(seatPlan); // Show seat plan in modal\n    setIsModalOpen(true);\n  };\n  const handleSeatSelect = seatNumber => {\n    setSelectedSeat(seatNumber); // Allow only one seat to be selected\n  };\n  const handleBooking = async () => {\n    try {\n      if (selectedSeat) {\n        // Make the API call to book the seat\n        await book_seat_api(selectedSeat); // Call the booking API\n        alert(`Seat booked: ${selectedSeat}`);\n        // Reset everything\n        setSelectedSeat(null);\n        setIsModalOpen(false);\n      }\n    } catch (error) {\n      console.error(\"Error booking seat:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bus-list\",\n      children: buses.map(bus => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bus-item ${bus.live ? 'live' : 'not-live'}`,\n        style: {\n          backgroundColor: bus.color\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [bus.busName, \" (ID: \", bus.busId, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Remaining Seats: \", bus.totalSeats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Current Occupancy: \", bus.currentOccupancy]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"live-status\",\n          style: {\n            color: bus.live ? 'White' : 'blue'\n          },\n          children: bus.live ? 'Live' : 'Not Live'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"view-seat-plan-btn\",\n          onClick: () => viewSeatPlan(bus.seatPlan),\n          children: \"View Seat Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 25\n        }, this)]\n      }, bus.busId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }, this), isModalOpen && selectedSeatPlan && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"seat-plan-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Seat Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seat-grid\",\n          children: Object.keys(selectedSeatPlan).sort((a, b) => {\n            // Extract number and letter from seat (e.g., \"1A\")\n            const [aNumber, aLetter] = [parseInt(a[0]), a[1]];\n            const [bNumber, bLetter] = [parseInt(b[0]), b[1]];\n\n            // Sort by number first, then by letter\n            if (aNumber === bNumber) {\n              return aLetter.localeCompare(bLetter); // Sort alphabetically if numbers are the same\n            }\n            return aNumber - bNumber; // Sort numerically\n          }).map(seatNumber => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `seat-btn ${selectedSeatPlan[seatNumber] ? 'available' : 'booked'}`,\n            disabled: !selectedSeatPlan[seatNumber] // Disable button if seat is booked\n            ,\n            onClick: () => handleSeatSelect(seatNumber),\n            style: {\n              backgroundColor: selectedSeat === seatNumber ? 'lightblue' : selectedSeatPlan[seatNumber] ? 'lightgreen' : 'lightcoral'\n            },\n            children: seatNumber\n          }, seatNumber, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }, this), selectedSeat && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"book-btn\",\n          onClick: handleBooking,\n          children: \"Book Seat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 9\n  }, this);\n};\n_s(HomePage, \"vZm9U0fp5X9LdNkcwFVFWhZG7gY=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","book_seat_api","jsxDEV","_jsxDEV","HomePage","_s","buses","setBuses","isModalOpen","setIsModalOpen","selectedSeatPlan","setSelectedSeatPlan","selectedSeat","setSelectedSeat","viewSeatPlan","seatPlan","handleSeatSelect","seatNumber","handleBooking","alert","error","console","className","children","map","bus","live","style","backgroundColor","color","busName","busId","fileName","_jsxFileName","lineNumber","columnNumber","totalSeats","currentOccupancy","onClick","Object","keys","sort","a","b","aNumber","aLetter","parseInt","bNumber","bLetter","localeCompare","disabled","_c","$RefreshReg$"],"sources":["/Users/vivek/Desktop/movein/shuttle_ride/src/pages/home.jsx"],"sourcesContent":["// import \"./HomePage.css\";\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Ensure you have this import\n// import { search_busses } from '../apicalls/user'; // Adjust the import as necessary\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//   const handleManageBookings = () => {\n//     navigate(\"/manage-bookings\");\n//   };\n//   const viewSeatPlan = (busId) => {\n//     navigate(`/seat-plan/${busId}`); // Assuming you have a route for seat plan details\n//   };\n//   const handleLogout = () => {\n//     localStorage.removeItem('JWT');  // Clear token on logout\n//     navigate(\"/login\");\n//   };\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n\n//         // Only proceed if token exists\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token); // Call verify_jwt only once\n\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         console.log(\"Invalid token, redirecting to login\");\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n\n//         if (\n//             sourceLatitude === \"\" ||\n//             sourceLongitude === \"\" ||\n//             destinationLatitude === \"\" ||\n//             destinationLongitude === \"\"\n//         ) {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n\n//         // Additional validation: Check latitude and longitude ranges\n//         if (\n//             sourceLatitude < -1 || sourceLatitude > 20 ||\n//             destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 ||\n//             destinationLongitude < -1 || destinationLongitude > 20\n//         ) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         // Fetch buses here\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             console.log(busData); // Check the structure of the bus data\n//             setBuses(busData); // Set the fetched bus data to state\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n\n//       <div className=\"homepage-container\">\n//         <div className=\"top-buttons\">\n//           <button onClick={handleManageBookings} className=\"top-btn\">\n//             Manage Bookings\n//           </button>\n//           <button onClick={handleLogout} className=\"top-btn\">\n//             Logout\n//           </button>\n//         </div>\n    \n//         <div className=\"search-container\">\n//           <h1>Bus Search</h1>\n//           <form onSubmit={handleSearch} className=\"horizontal-form\">\n//             <div className=\"coordinate-input\">\n//               <label>Source Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLatitude}\n//                 onChange={(e) => setSourceLatitude(e.target.value)}\n//                 placeholder=\"Source Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Source Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLongitude}\n//                 onChange={(e) => setSourceLongitude(e.target.value)}\n//                 placeholder=\"Source Longitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLatitude}\n//                 onChange={(e) => setDestinationLatitude(e.target.value)}\n//                 placeholder=\"Destination Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLongitude}\n//                 onChange={(e) => setDestinationLongitude(e.target.value)}\n//                 placeholder=\"Destination Longitude\"\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"search-btn\">\n//               Search Buses\n//             </button>\n//           </form>\n    \n\n//             </div>\n            \n     \n//             <div className=\"bus-list\">\n//     {buses.map((bus) => (\n//         <div\n//             key={bus.busId}\n//             className={`bus-item ${bus.live ? 'live' : 'not-live'}`}\n//             style={{ backgroundColor: bus.color }}\n//                                                       >\n//             <h3>{bus.busName} (ID: {bus.busId})</h3>\n//             <p>Remaining Seats: {bus.totalSeats}</p>\n//             <p>Current Occupancy: {bus.currentOccupancy}</p>\n//             <p className=\"live-status\" style={{ color: bus.live ? 'White' : 'blue' }}>\n//                 {bus.live ? 'Live' : 'Not Live'}\n//             </p>\n//             <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.busId)}>View Seat Plan</button>\n//             </div>\n//           ))}\n//       </div>\n//         </div>\n//     );\n// };\n\n// export default HomePage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { search_busses } from '../apicalls/user';\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// import './HomePage.css'; // Ensure you have relevant CSS for the modal and layout\n\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//     const [selectedSeatPlan, setSelectedSeatPlan] = useState(null); // For seat plan\n//     const [isModalOpen, setIsModalOpen] = useState(false); // Modal visibility\n\n//     const handleManageBookings = () => {\n//         navigate(\"/manage-bookings\");\n//     };\n\n//     const viewSeatPlan = (seatPlan) => {\n//         setSelectedSeatPlan(seatPlan); // Set seat plan to state\n//         setIsModalOpen(true); // Open modal\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('JWT');  // Clear token on logout\n//         navigate(\"/login\");\n//     };\n\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token);\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n//         if (sourceLatitude === \"\" || sourceLongitude === \"\" || destinationLatitude === \"\" || destinationLongitude === \"\") {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n//         if (sourceLatitude < -1 || sourceLatitude > 20 || destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 || destinationLongitude < -1 || destinationLongitude > 20) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             setBuses(busData);\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n//         <div className=\"homepage-container\">\n//             <div className=\"top-buttons\">\n//                 <button onClick={handleManageBookings} className=\"top-btn\">Manage Bookings</button>\n//                 <button onClick={handleLogout} className=\"top-btn\">Logout</button>\n//             </div>\n\n//             <div className=\"search-container\">\n//                 <h1>Bus Search</h1>\n//                 <form onSubmit={handleSearch} className=\"horizontal-form\">\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLatitude}\n//                             onChange={(e) => setSourceLatitude(e.target.value)}\n//                             placeholder=\"Source Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLongitude}\n//                             onChange={(e) => setSourceLongitude(e.target.value)}\n//                             placeholder=\"Source Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLatitude}\n//                             onChange={(e) => setDestinationLatitude(e.target.value)}\n//                             placeholder=\"Destination Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLongitude}\n//                             onChange={(e) => setDestinationLongitude(e.target.value)}\n//                             placeholder=\"Destination Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"search-btn\">Search Buses</button>\n//                 </form>\n//             </div>\n\n//             <div className=\"bus-list\">\n//                 {buses.map((bus) => (\n//                     <div key={bus.busId} className={`bus-item ${bus.live ? 'live' : 'not-live'}`} style={{ backgroundColor: bus.color }}>\n//                         <h3>{bus.busName} (ID: {bus.busId})</h3>\n//                         <p>Total Seats: {bus.totalSeats}</p>\n//                         <p>Current Occupancy: {bus.currentOccupancy}</p>\n//                         <p className=\"live-status\" style={{ color: bus.live ? 'white' : 'blue' }}>{bus.live ? 'Live' : 'Not Live'}</p>\n//                         <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.seatPlan)}>View Seat Plan</button>\n//                     </div>\n//                 ))}\n//             </div>\n\n//             {isModalOpen && selectedSeatPlan && (\n//     <div className=\"seat-plan-modal\">\n//         <div className=\"modal-content\">\n//             <h2>Seat Plan</h2>\n//             <div className=\"seat-grid\">\n//                 {Object.keys(selectedSeatPlan)\n//                     .sort((a, b) => {\n//                         // Extract number and letter from seat (e.g., \"1A\")\n//                         const [aNumber, aLetter] = [parseInt(a[0]), a[1]];\n//                         const [bNumber, bLetter] = [parseInt(b[0]), b[1]];\n                        \n//                         // Sort by number first, then by letter\n//                         if (aNumber === bNumber) {\n//                             return aLetter.localeCompare(bLetter); // Sort alphabetically if numbers are the same\n//                         }\n//                         return aNumber - bNumber; // Sort numerically\n//                     })\n//                     .map((seatNumber) => (\n//                         <div\n//                             key={seatNumber}\n//                             className=\"seat\"\n//                             style={{\n//                                 backgroundColor: selectedSeatPlan[seatNumber] ? 'lightgreen' : 'lightcoral',\n//                             }}\n//                         >\n//                             {seatNumber}: {selectedSeatPlan[seatNumber] ? 'Available' : 'Booked'}\n//                         </div>\n//                     ))}\n//             </div>\n//             <button className=\"close-btn\" onClick={() => setIsModalOpen(false)}>Close</button>\n//         </div>\n//     </div>\n// )}\n\n//         </div>\n//     );\n// };\n\n// export default HomePage;\nimport React, { useState, useEffect } from 'react';\nimport { book_seat_api } from '../apicalls/user'; // Add your API call import\n\nconst HomePage = () => {\n    const [buses, setBuses] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedSeatPlan, setSelectedSeatPlan] = useState(null);\n    const [selectedSeat, setSelectedSeat] = useState(null); // Keep track of the selected seat\n\n    const viewSeatPlan = (seatPlan) => {\n        setSelectedSeatPlan(seatPlan); // Show seat plan in modal\n        setIsModalOpen(true);\n    };\n\n    const handleSeatSelect = (seatNumber) => {\n        setSelectedSeat(seatNumber); // Allow only one seat to be selected\n    };\n\n    const handleBooking = async () => {\n        try {\n            if (selectedSeat) {\n                // Make the API call to book the seat\n                await book_seat_api(selectedSeat); // Call the booking API\n                alert(`Seat booked: ${selectedSeat}`);\n                // Reset everything\n                setSelectedSeat(null);\n                setIsModalOpen(false);\n            }\n        } catch (error) {\n            console.error(\"Error booking seat:\", error);\n        }\n    };\n\n    return (\n        <div className=\"homepage-container\">\n            <div className=\"bus-list\">\n                {buses.map((bus) => (\n                    <div\n                        key={bus.busId}\n                        className={`bus-item ${bus.live ? 'live' : 'not-live'}`}\n                        style={{ backgroundColor: bus.color }}\n                    >\n                        <h3>{bus.busName} (ID: {bus.busId})</h3>\n                        <p>Remaining Seats: {bus.totalSeats}</p>\n                        <p>Current Occupancy: {bus.currentOccupancy}</p>\n                        <p className=\"live-status\" style={{ color: bus.live ? 'White' : 'blue' }}>\n                            {bus.live ? 'Live' : 'Not Live'}\n                        </p>\n                        <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.seatPlan)}>View Seat Plan</button>\n                    </div>\n                ))}\n            </div>\n\n            {/* Seat Plan Modal */}\n            {isModalOpen && selectedSeatPlan && (\n                <div className=\"seat-plan-modal\">\n                    <div className=\"modal-content\">\n                        <h2>Seat Plan</h2>\n                        <div className=\"seat-grid\">\n                            {Object.keys(selectedSeatPlan)\n                                .sort((a, b) => {\n                                    // Extract number and letter from seat (e.g., \"1A\")\n                                    const [aNumber, aLetter] = [parseInt(a[0]), a[1]];\n                                    const [bNumber, bLetter] = [parseInt(b[0]), b[1]];\n\n                                    // Sort by number first, then by letter\n                                    if (aNumber === bNumber) {\n                                        return aLetter.localeCompare(bLetter); // Sort alphabetically if numbers are the same\n                                    }\n                                    return aNumber - bNumber; // Sort numerically\n                                })\n                                .map((seatNumber) => (\n                                    <button\n                                        key={seatNumber}\n                                        className={`seat-btn ${selectedSeatPlan[seatNumber] ? 'available' : 'booked'}`}\n                                        disabled={!selectedSeatPlan[seatNumber]} // Disable button if seat is booked\n                                        onClick={() => handleSeatSelect(seatNumber)}\n                                        style={{\n                                            backgroundColor: selectedSeat === seatNumber ? 'lightblue' : (selectedSeatPlan[seatNumber] ? 'lightgreen' : 'lightcoral'),\n                                        }}\n                                    >\n                                        {seatNumber}\n                                    </button>\n                                ))}\n                        </div>\n\n                        {/* Display Book button only if one seat is selected */}\n                        {selectedSeat && (\n                            <button className=\"book-btn\" onClick={handleBooking}>Book Seat</button>\n                        )}\n                        <button className=\"close-btn\" onClick={() => setIsModalOpen(false)}>Close</button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default HomePage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import \"./HomePage.css\";\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Ensure you have this import\n// import { search_busses } from '../apicalls/user'; // Adjust the import as necessary\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//   const handleManageBookings = () => {\n//     navigate(\"/manage-bookings\");\n//   };\n//   const viewSeatPlan = (busId) => {\n//     navigate(`/seat-plan/${busId}`); // Assuming you have a route for seat plan details\n//   };\n//   const handleLogout = () => {\n//     localStorage.removeItem('JWT');  // Clear token on logout\n//     navigate(\"/login\");\n//   };\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n\n//         // Only proceed if token exists\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token); // Call verify_jwt only once\n\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         console.log(\"Invalid token, redirecting to login\");\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n\n//         if (\n//             sourceLatitude === \"\" ||\n//             sourceLongitude === \"\" ||\n//             destinationLatitude === \"\" ||\n//             destinationLongitude === \"\"\n//         ) {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n\n//         // Additional validation: Check latitude and longitude ranges\n//         if (\n//             sourceLatitude < -1 || sourceLatitude > 20 ||\n//             destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 ||\n//             destinationLongitude < -1 || destinationLongitude > 20\n//         ) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         // Fetch buses here\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             console.log(busData); // Check the structure of the bus data\n//             setBuses(busData); // Set the fetched bus data to state\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n\n//       <div className=\"homepage-container\">\n//         <div className=\"top-buttons\">\n//           <button onClick={handleManageBookings} className=\"top-btn\">\n//             Manage Bookings\n//           </button>\n//           <button onClick={handleLogout} className=\"top-btn\">\n//             Logout\n//           </button>\n//         </div>\n\n//         <div className=\"search-container\">\n//           <h1>Bus Search</h1>\n//           <form onSubmit={handleSearch} className=\"horizontal-form\">\n//             <div className=\"coordinate-input\">\n//               <label>Source Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLatitude}\n//                 onChange={(e) => setSourceLatitude(e.target.value)}\n//                 placeholder=\"Source Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Source Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLongitude}\n//                 onChange={(e) => setSourceLongitude(e.target.value)}\n//                 placeholder=\"Source Longitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLatitude}\n//                 onChange={(e) => setDestinationLatitude(e.target.value)}\n//                 placeholder=\"Destination Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLongitude}\n//                 onChange={(e) => setDestinationLongitude(e.target.value)}\n//                 placeholder=\"Destination Longitude\"\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"search-btn\">\n//               Search Buses\n//             </button>\n//           </form>\n\n//             </div>\n\n//             <div className=\"bus-list\">\n//     {buses.map((bus) => (\n//         <div\n//             key={bus.busId}\n//             className={`bus-item ${bus.live ? 'live' : 'not-live'}`}\n//             style={{ backgroundColor: bus.color }}\n//                                                       >\n//             <h3>{bus.busName} (ID: {bus.busId})</h3>\n//             <p>Remaining Seats: {bus.totalSeats}</p>\n//             <p>Current Occupancy: {bus.currentOccupancy}</p>\n//             <p className=\"live-status\" style={{ color: bus.live ? 'White' : 'blue' }}>\n//                 {bus.live ? 'Live' : 'Not Live'}\n//             </p>\n//             <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.busId)}>View Seat Plan</button>\n//             </div>\n//           ))}\n//       </div>\n//         </div>\n//     );\n// };\n\n// export default HomePage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { search_busses } from '../apicalls/user';\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// import './HomePage.css'; // Ensure you have relevant CSS for the modal and layout\n\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//     const [selectedSeatPlan, setSelectedSeatPlan] = useState(null); // For seat plan\n//     const [isModalOpen, setIsModalOpen] = useState(false); // Modal visibility\n\n//     const handleManageBookings = () => {\n//         navigate(\"/manage-bookings\");\n//     };\n\n//     const viewSeatPlan = (seatPlan) => {\n//         setSelectedSeatPlan(seatPlan); // Set seat plan to state\n//         setIsModalOpen(true); // Open modal\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('JWT');  // Clear token on logout\n//         navigate(\"/login\");\n//     };\n\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token);\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n//         if (sourceLatitude === \"\" || sourceLongitude === \"\" || destinationLatitude === \"\" || destinationLongitude === \"\") {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n//         if (sourceLatitude < -1 || sourceLatitude > 20 || destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 || destinationLongitude < -1 || destinationLongitude > 20) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             setBuses(busData);\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n//         <div className=\"homepage-container\">\n//             <div className=\"top-buttons\">\n//                 <button onClick={handleManageBookings} className=\"top-btn\">Manage Bookings</button>\n//                 <button onClick={handleLogout} className=\"top-btn\">Logout</button>\n//             </div>\n\n//             <div className=\"search-container\">\n//                 <h1>Bus Search</h1>\n//                 <form onSubmit={handleSearch} className=\"horizontal-form\">\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLatitude}\n//                             onChange={(e) => setSourceLatitude(e.target.value)}\n//                             placeholder=\"Source Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLongitude}\n//                             onChange={(e) => setSourceLongitude(e.target.value)}\n//                             placeholder=\"Source Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLatitude}\n//                             onChange={(e) => setDestinationLatitude(e.target.value)}\n//                             placeholder=\"Destination Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLongitude}\n//                             onChange={(e) => setDestinationLongitude(e.target.value)}\n//                             placeholder=\"Destination Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"search-btn\">Search Buses</button>\n//                 </form>\n//             </div>\n\n//             <div className=\"bus-list\">\n//                 {buses.map((bus) => (\n//                     <div key={bus.busId} className={`bus-item ${bus.live ? 'live' : 'not-live'}`} style={{ backgroundColor: bus.color }}>\n//                         <h3>{bus.busName} (ID: {bus.busId})</h3>\n//                         <p>Total Seats: {bus.totalSeats}</p>\n//                         <p>Current Occupancy: {bus.currentOccupancy}</p>\n//                         <p className=\"live-status\" style={{ color: bus.live ? 'white' : 'blue' }}>{bus.live ? 'Live' : 'Not Live'}</p>\n//                         <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.seatPlan)}>View Seat Plan</button>\n//                     </div>\n//                 ))}\n//             </div>\n\n//             {isModalOpen && selectedSeatPlan && (\n//     <div className=\"seat-plan-modal\">\n//         <div className=\"modal-content\">\n//             <h2>Seat Plan</h2>\n//             <div className=\"seat-grid\">\n//                 {Object.keys(selectedSeatPlan)\n//                     .sort((a, b) => {\n//                         // Extract number and letter from seat (e.g., \"1A\")\n//                         const [aNumber, aLetter] = [parseInt(a[0]), a[1]];\n//                         const [bNumber, bLetter] = [parseInt(b[0]), b[1]];\n\n//                         // Sort by number first, then by letter\n//                         if (aNumber === bNumber) {\n//                             return aLetter.localeCompare(bLetter); // Sort alphabetically if numbers are the same\n//                         }\n//                         return aNumber - bNumber; // Sort numerically\n//                     })\n//                     .map((seatNumber) => (\n//                         <div\n//                             key={seatNumber}\n//                             className=\"seat\"\n//                             style={{\n//                                 backgroundColor: selectedSeatPlan[seatNumber] ? 'lightgreen' : 'lightcoral',\n//                             }}\n//                         >\n//                             {seatNumber}: {selectedSeatPlan[seatNumber] ? 'Available' : 'Booked'}\n//                         </div>\n//                     ))}\n//             </div>\n//             <button className=\"close-btn\" onClick={() => setIsModalOpen(false)}>Close</button>\n//         </div>\n//     </div>\n// )}\n\n//         </div>\n//     );\n// };\n\n// export default HomePage;","map":{"version":3,"names":[],"sources":["/Users/vivek/Desktop/movein/shuttle_ride/src/pages/home.jsx"],"sourcesContent":["// import \"./HomePage.css\";\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Ensure you have this import\n// import { search_busses } from '../apicalls/user'; // Adjust the import as necessary\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//   const handleManageBookings = () => {\n//     navigate(\"/manage-bookings\");\n//   };\n//   const viewSeatPlan = (busId) => {\n//     navigate(`/seat-plan/${busId}`); // Assuming you have a route for seat plan details\n//   };\n//   const handleLogout = () => {\n//     localStorage.removeItem('JWT');  // Clear token on logout\n//     navigate(\"/login\");\n//   };\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n\n//         // Only proceed if token exists\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token); // Call verify_jwt only once\n\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         console.log(\"Invalid token, redirecting to login\");\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n\n//         if (\n//             sourceLatitude === \"\" ||\n//             sourceLongitude === \"\" ||\n//             destinationLatitude === \"\" ||\n//             destinationLongitude === \"\"\n//         ) {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n\n//         // Additional validation: Check latitude and longitude ranges\n//         if (\n//             sourceLatitude < -1 || sourceLatitude > 20 ||\n//             destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 ||\n//             destinationLongitude < -1 || destinationLongitude > 20\n//         ) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         // Fetch buses here\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             console.log(busData); // Check the structure of the bus data\n//             setBuses(busData); // Set the fetched bus data to state\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n\n//       <div className=\"homepage-container\">\n//         <div className=\"top-buttons\">\n//           <button onClick={handleManageBookings} className=\"top-btn\">\n//             Manage Bookings\n//           </button>\n//           <button onClick={handleLogout} className=\"top-btn\">\n//             Logout\n//           </button>\n//         </div>\n    \n//         <div className=\"search-container\">\n//           <h1>Bus Search</h1>\n//           <form onSubmit={handleSearch} className=\"horizontal-form\">\n//             <div className=\"coordinate-input\">\n//               <label>Source Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLatitude}\n//                 onChange={(e) => setSourceLatitude(e.target.value)}\n//                 placeholder=\"Source Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Source Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={sourceLongitude}\n//                 onChange={(e) => setSourceLongitude(e.target.value)}\n//                 placeholder=\"Source Longitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Latitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLatitude}\n//                 onChange={(e) => setDestinationLatitude(e.target.value)}\n//                 placeholder=\"Destination Latitude\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"coordinate-input\">\n//               <label>Destination Longitude</label>\n//               <input\n//                 type=\"number\"\n//                 value={destinationLongitude}\n//                 onChange={(e) => setDestinationLongitude(e.target.value)}\n//                 placeholder=\"Destination Longitude\"\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"search-btn\">\n//               Search Buses\n//             </button>\n//           </form>\n    \n\n//             </div>\n            \n     \n//             <div className=\"bus-list\">\n//     {buses.map((bus) => (\n//         <div\n//             key={bus.busId}\n//             className={`bus-item ${bus.live ? 'live' : 'not-live'}`}\n//             style={{ backgroundColor: bus.color }}\n//                                                       >\n//             <h3>{bus.busName} (ID: {bus.busId})</h3>\n//             <p>Remaining Seats: {bus.totalSeats}</p>\n//             <p>Current Occupancy: {bus.currentOccupancy}</p>\n//             <p className=\"live-status\" style={{ color: bus.live ? 'White' : 'blue' }}>\n//                 {bus.live ? 'Live' : 'Not Live'}\n//             </p>\n//             <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.busId)}>View Seat Plan</button>\n//             </div>\n//           ))}\n//       </div>\n//         </div>\n//     );\n// };\n\n// export default HomePage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { search_busses } from '../apicalls/user';\n// import { verify_jwt } from \"../apicalls/axiosInstance\";\n// import './HomePage.css'; // Ensure you have relevant CSS for the modal and layout\n\n// const HomePage = () => {\n//     const navigate = useNavigate();\n//     const [buses, setBuses] = useState([]);\n//     const [sourceLatitude, setSourceLatitude] = useState(\"\");\n//     const [sourceLongitude, setSourceLongitude] = useState(\"\");\n//     const [destinationLatitude, setDestinationLatitude] = useState(\"\");\n//     const [destinationLongitude, setDestinationLongitude] = useState(\"\");\n//     const [selectedSeatPlan, setSelectedSeatPlan] = useState(null); // For seat plan\n//     const [isModalOpen, setIsModalOpen] = useState(false); // Modal visibility\n\n//     const handleManageBookings = () => {\n//         navigate(\"/manage-bookings\");\n//     };\n\n//     const viewSeatPlan = (seatPlan) => {\n//         setSelectedSeatPlan(seatPlan); // Set seat plan to state\n//         setIsModalOpen(true); // Open modal\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('JWT');  // Clear token on logout\n//         navigate(\"/login\");\n//     };\n\n//     useEffect(() => {\n//         const token = localStorage.getItem('JWT');\n//         if (token) {\n//             const verifyToken = async () => {\n//                 try {\n//                     const response = await verify_jwt(token);\n//                     if (response === \"-1\" || response === \"-2\") {\n//                         navigate(\"/login\");\n//                     }\n//                 } catch (error) {\n//                     console.error(\"Error verifying JWT:\", error);\n//                     navigate(\"/login\");\n//                 }\n//             };\n//             verifyToken();\n//         } else {\n//             navigate(\"/login\");\n//         }\n//     }, [navigate]);\n\n//     const handleSearch = async (e) => {\n//         e.preventDefault();\n//         if (sourceLatitude === \"\" || sourceLongitude === \"\" || destinationLatitude === \"\" || destinationLongitude === \"\") {\n//             alert(\"Please fill in both source and destination coordinates.\");\n//             return;\n//         }\n//         if (sourceLatitude < -1 || sourceLatitude > 20 || destinationLatitude < -1 || destinationLatitude > 20 ||\n//             sourceLongitude < -1 || sourceLongitude > 20 || destinationLongitude < -1 || destinationLongitude > 20) {\n//             alert(\"Invalid latitude or longitude values. Please enter valid coordinates.\");\n//             return;\n//         }\n\n//         try {\n//             const busData = await search_busses(sourceLatitude, sourceLongitude, destinationLatitude, destinationLongitude);\n//             setBuses(busData);\n//         } catch (err) {\n//             console.error('Error fetching buses:', err);\n//         }\n//     };\n\n//     return (\n//         <div className=\"homepage-container\">\n//             <div className=\"top-buttons\">\n//                 <button onClick={handleManageBookings} className=\"top-btn\">Manage Bookings</button>\n//                 <button onClick={handleLogout} className=\"top-btn\">Logout</button>\n//             </div>\n\n//             <div className=\"search-container\">\n//                 <h1>Bus Search</h1>\n//                 <form onSubmit={handleSearch} className=\"horizontal-form\">\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLatitude}\n//                             onChange={(e) => setSourceLatitude(e.target.value)}\n//                             placeholder=\"Source Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Source Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={sourceLongitude}\n//                             onChange={(e) => setSourceLongitude(e.target.value)}\n//                             placeholder=\"Source Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Latitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLatitude}\n//                             onChange={(e) => setDestinationLatitude(e.target.value)}\n//                             placeholder=\"Destination Latitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <div className=\"coordinate-input\">\n//                         <label>Destination Longitude</label>\n//                         <input\n//                             type=\"number\"\n//                             value={destinationLongitude}\n//                             onChange={(e) => setDestinationLongitude(e.target.value)}\n//                             placeholder=\"Destination Longitude\"\n//                             required\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"search-btn\">Search Buses</button>\n//                 </form>\n//             </div>\n\n//             <div className=\"bus-list\">\n//                 {buses.map((bus) => (\n//                     <div key={bus.busId} className={`bus-item ${bus.live ? 'live' : 'not-live'}`} style={{ backgroundColor: bus.color }}>\n//                         <h3>{bus.busName} (ID: {bus.busId})</h3>\n//                         <p>Total Seats: {bus.totalSeats}</p>\n//                         <p>Current Occupancy: {bus.currentOccupancy}</p>\n//                         <p className=\"live-status\" style={{ color: bus.live ? 'white' : 'blue' }}>{bus.live ? 'Live' : 'Not Live'}</p>\n//                         <button className=\"view-seat-plan-btn\" onClick={() => viewSeatPlan(bus.seatPlan)}>View Seat Plan</button>\n//                     </div>\n//                 ))}\n//             </div>\n\n//             {isModalOpen && selectedSeatPlan && (\n//     <div className=\"seat-plan-modal\">\n//         <div className=\"modal-content\">\n//             <h2>Seat Plan</h2>\n//             <div className=\"seat-grid\">\n//                 {Object.keys(selectedSeatPlan)\n//                     .sort((a, b) => {\n//                         // Extract number and letter from seat (e.g., \"1A\")\n//                         const [aNumber, aLetter] = [parseInt(a[0]), a[1]];\n//                         const [bNumber, bLetter] = [parseInt(b[0]), b[1]];\n                        \n//                         // Sort by number first, then by letter\n//                         if (aNumber === bNumber) {\n//                             return aLetter.localeCompare(bLetter); // Sort alphabetically if numbers are the same\n//                         }\n//                         return aNumber - bNumber; // Sort numerically\n//                     })\n//                     .map((seatNumber) => (\n//                         <div\n//                             key={seatNumber}\n//                             className=\"seat\"\n//                             style={{\n//                                 backgroundColor: selectedSeatPlan[seatNumber] ? 'lightgreen' : 'lightcoral',\n//                             }}\n//                         >\n//                             {seatNumber}: {selectedSeatPlan[seatNumber] ? 'Available' : 'Booked'}\n//                         </div>\n//                     ))}\n//             </div>\n//             <button className=\"close-btn\" onClick={() => setIsModalOpen(false)}>Close</button>\n//         </div>\n//     </div>\n// )}\n\n//         </div>\n//     );\n// };\n\n// export default HomePage;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}